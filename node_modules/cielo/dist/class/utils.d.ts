/// <reference types="node" />
import { IncomingMessage } from 'http';
import { RequestOptions } from 'https';
import { CieloTransactionInterface } from '../interface/cielo-transaction.interface';
export declare class Utils {
    private cieloConstructor;
    constructor(params: CieloTransactionInterface);
    get<T>(params: {
        path: string;
    }): Promise<T>;
    postToSales<T, U>(data: U): Promise<T>;
    /**
     * Realiza um post na API da Cielo
     * @param params path do post
     * @param data payload de envio
     */
    post<T, U>(params: {
        path: string;
    }, data: U): Promise<T>;
    getHttpRequestOptions(params: {
        hostname: string;
        path: string;
        method: HttpRequestMethodEnum;
    }): IHttpRequestOptions;
    private parseHttpRequestError;
    private parseHttpPutResponse;
    httpRequest(options: IHttpRequestOptions, data: any): Promise<IHttpResponse>;
    request<T>(options: IHttpRequestOptions, data: any): Promise<T>;
    validateJSON(text: string): boolean;
}
export declare enum HttpRequestMethodEnum {
    GET = "GET",
    POST = "POST",
    PUT = "PUT"
}
export interface IHttpRequestOptions extends RequestOptions {
    method: HttpRequestMethodEnum;
    path: string;
    hostname: string;
    headers: any;
    encoding: string;
    port: number;
}
export interface IHttpRequestReject {
    statusCode: string;
    request: string;
    response: IncomingMessage;
}
/**
 * Interface com dados que serão retornados em todas as requisições
 */
export interface IHttpResponse {
    statusCode: number;
    statusMessage: string;
    data?: any;
}
