"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recurrent = void 0;
const utils_1 = require("./utils");
class Recurrent {
    constructor(transaction) {
        this.cieloTransactionParams = transaction;
        this.util = new utils_1.Utils(this.cieloTransactionParams);
    }
    create(params) {
        return this.util.postToSales(params);
    }
    modifyCustomer(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Customer`,
            data: params.customer
        };
        return this.modify(modifyParams);
    }
    ;
    modifyEndDate(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/EndDate`,
            data: params.endDate
        };
        return this.modify(modifyParams);
    }
    ;
    modifyInterval(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Interval`,
            data: params.interval
        };
        return this.modify(modifyParams);
    }
    ;
    modifyRecurrencyDay(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/RecurrencyDay`,
            data: params.recurrencyDay
        };
        return this.modify(modifyParams);
    }
    ;
    modifyAmount(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Amount`,
            data: (params.amount * 100).toString()
        };
        return this.modify(modifyParams);
    }
    ;
    modifyNextPaymentDate(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/NextPaymentDate`,
            data: params.nextPaymentDate
        };
        return this.modify(modifyParams);
    }
    ;
    modifyPayment(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Payment`,
            data: params.payment
        };
        return this.modify(modifyParams);
    }
    ;
    deactivate(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Deactivate`,
            data: ''
        };
        return this.modify(modifyParams);
    }
    ;
    reactivate(params) {
        const modifyParams = {
            path: `/1/RecurrentPayment/${params.paymentId}/Reactivate`,
            data: ''
        };
        return this.modify(modifyParams);
    }
    ;
    modify(params) {
        const options = this.util.getHttpRequestOptions({
            method: utils_1.HttpRequestMethodEnum.PUT,
            path: params.path,
            hostname: this.cieloTransactionParams.hostnameTransacao,
        });
        return this.util.httpRequest(options, params.data);
    }
}
exports.Recurrent = Recurrent;
