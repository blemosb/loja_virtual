"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestMethodEnum = exports.Utils = void 0;
const https_1 = require("https");
const camelcase_keys_1 = __importDefault(require("camelcase-keys"));
class Utils {
    constructor(params) {
        this.cieloConstructor = params;
    }
    get(params) {
        const hostname = this.cieloConstructor.hostnameQuery;
        const { path } = params;
        const method = HttpRequestMethodEnum.GET;
        const options = this.getHttpRequestOptions({
            path,
            hostname,
            method,
        });
        return this.request(options, {});
    }
    postToSales(data) {
        return this.post({ path: '/1/sales/' }, data);
    }
    /**
     * Realiza um post na API da Cielo
     * @param params path do post
     * @param data payload de envio
     */
    post(params, data) {
        const { path } = params;
        const options = this.getHttpRequestOptions({
            method: HttpRequestMethodEnum.POST,
            path,
            hostname: this.cieloConstructor.hostnameTransacao,
        });
        return this.request(options, data);
    }
    getHttpRequestOptions(params) {
        return {
            method: params.method,
            path: params.path,
            hostname: params.hostname,
            port: 443,
            encoding: "utf-8",
            headers: {
                MerchantId: this.cieloConstructor.merchantId,
                MerchantKey: this.cieloConstructor.merchantKey,
                RequestId: this.cieloConstructor.requestId || "",
                "Content-Type": "application/json",
            },
        };
    }
    parseHttpRequestError(options, data, responseHttp, responseCielo) {
        responseHttp.Code = (Array.isArray(responseCielo) && responseCielo[0] && responseCielo[0].Code) || '';
        responseHttp.Message = (Array.isArray(responseCielo) && responseCielo[0] && responseCielo[0].Message) || '';
        return {
            statusCode: responseHttp.statusCode || '',
            request: JSON.stringify(data).toString(),
            response: responseHttp
        };
    }
    parseHttpPutResponse(response) {
        return {
            statusCode: response.statusCode || 0,
            statusMessage: response.statusMessage || '',
        };
    }
    httpRequest(options, data) {
        const dataPost = JSON.stringify(data).normalize('NFD').replace(/[\u0300-\u036f]/g, "");
        return new Promise((resolve, reject) => {
            if (options && options.headers)
                options.headers['Content-Length'] = Buffer.byteLength(dataPost);
            const req = https_1.request(options, (res) => {
                var chunks = '';
                res.on('data', (chunk) => chunks += chunk);
                res.on('end', () => {
                    const response = (chunks.length > 0 && this.validateJSON(chunks)) ? JSON.parse(chunks) : '';
                    if (res.statusCode && [200, 201].indexOf(res.statusCode) === -1)
                        return reject(this.parseHttpRequestError(options, data, res, response));
                    if (options.method === 'PUT' && chunks.length === 0)
                        return resolve(this.parseHttpPutResponse(res));
                    return resolve(Object.assign(Object.assign({}, this.parseHttpPutResponse(res)), { data: camelcase_keys_1.default(response, { deep: true }) }));
                });
            });
            req.write(dataPost);
            req.on('error', (err) => reject(err));
            req.end();
        });
    }
    request(options, data) {
        return new Promise((resolve, reject) => {
            this.httpRequest(options, data)
                .then((response) => {
                const data = response.data ? response.data : {};
                resolve(data);
            })
                .catch(reject);
        });
    }
    validateJSON(text) {
        return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(text.replace(/"(\\.|[^"\\])*"/g, ''))) &&
            eval('(' + text + ')');
    }
}
exports.Utils = Utils;
var HttpRequestMethodEnum;
(function (HttpRequestMethodEnum) {
    HttpRequestMethodEnum["GET"] = "GET";
    HttpRequestMethodEnum["POST"] = "POST";
    HttpRequestMethodEnum["PUT"] = "PUT";
})(HttpRequestMethodEnum = exports.HttpRequestMethodEnum || (exports.HttpRequestMethodEnum = {}));
